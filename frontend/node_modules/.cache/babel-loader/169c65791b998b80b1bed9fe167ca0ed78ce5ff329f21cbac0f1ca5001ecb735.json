{"ast":null,"code":"// Weather Service for MPT Application\n// This service fetches real weather data for water sports activities\nimport{getApiKey}from'../config/apiKeys';class WeatherService{constructor(){// Using OpenWeatherMap API (free tier)\n// You can get a free API key from: https://openweathermap.org/api\nthis.apiKey=getApiKey('OPENWEATHER')||'DEMO_KEY';// Use configured key or fallback\nthis.baseUrl='https://api.openweathermap.org/data/2.5';}// Get current weather for a specific location\nasync getCurrentWeather(){let lat=arguments.length>0&&arguments[0]!==undefined?arguments[0]:-33.8688;let lon=arguments.length>1&&arguments[1]!==undefined?arguments[1]:151.2093;// Default: Sydney, Australia\ntry{const response=await fetch(\"\".concat(this.baseUrl,\"/weather?lat=\").concat(lat,\"&lon=\").concat(lon,\"&appid=\").concat(this.apiKey,\"&units=metric\"));if(!response.ok){throw new Error('Weather data unavailable');}const data=await response.json();return this.formatWeatherData(data);}catch(error){console.error('Error fetching weather:',error);return this.getMockWeatherData();// Fallback to mock data\n}}// Get weather forecast for the next few days\nasync getWeatherForecast(){let lat=arguments.length>0&&arguments[0]!==undefined?arguments[0]:-33.8688;let lon=arguments.length>1&&arguments[1]!==undefined?arguments[1]:151.2093;try{const response=await fetch(\"\".concat(this.baseUrl,\"/forecast?lat=\").concat(lat,\"&lon=\").concat(lon,\"&appid=\").concat(this.apiKey,\"&units=metric\"));if(!response.ok){throw new Error('Forecast data unavailable');}const data=await response.json();return this.formatForecastData(data);}catch(error){console.error('Error fetching forecast:',error);return this.getMockForecastData();// Fallback to mock data\n}}// Format current weather data for display\nformatWeatherData(data){return{temperature:Math.round(data.main.temp),feelsLike:Math.round(data.main.feels_like),humidity:data.main.humidity,windSpeed:Math.round(data.wind.speed*3.6),// Convert m/s to km/h\nwindDirection:this.getWindDirection(data.wind.deg),description:data.weather[0].description,icon:data.weather[0].icon,pressure:data.main.pressure,visibility:data.visibility/1000,// Convert to km\ntimestamp:new Date().toLocaleTimeString(),location:'Sydney Harbour',// Default location\nwaterSportsRating:this.calculateWaterSportsRating(data)};}// Format forecast data for display\nformatForecastData(data){const dailyForecasts=[];// Group forecasts by day\nconst dailyData={};data.list.forEach(item=>{const date=new Date(item.dt*1000);const day=date.toDateString();if(!dailyData[day]){dailyData[day]=[];}dailyData[day].push(item);});// Get daily averages\nObject.keys(dailyData).forEach(day=>{const dayData=dailyData[day];const avgTemp=dayData.reduce((sum,item)=>sum+item.main.temp,0)/dayData.length;const avgWind=dayData.reduce((sum,item)=>sum+item.wind.speed,0)/dayData.length;const description=dayData[0].weather[0].description;dailyForecasts.push({date:new Date(day),temperature:Math.round(avgTemp),windSpeed:Math.round(avgWind*3.6),description:description,icon:dayData[0].weather[0].icon,waterSportsRating:this.calculateWaterSportsRating({main:{temp:avgTemp},wind:{speed:avgWind},weather:[{description:description}]})});});return dailyForecasts.slice(0,5);// Return next 5 days\n}// Calculate water sports suitability rating (1-10)\ncalculateWaterSportsRating(weatherData){let rating=5;// Base rating\n// Temperature factor (ideal: 20-30Â°C)\nconst temp=weatherData.main.temp;if(temp>=20&&temp<=30)rating+=2;else if(temp>=15&&temp<=35)rating+=1;else if(temp<10||temp>40)rating-=2;// Wind factor (ideal: 15-25 km/h for kitesurfing)\nconst windSpeed=weatherData.wind.speed*3.6;if(windSpeed>=15&&windSpeed<=25)rating+=3;else if(windSpeed>=10&&windSpeed<=30)rating+=1;else if(windSpeed<5||windSpeed>40)rating-=2;// Weather condition factor\nconst description=weatherData.weather[0].description.toLowerCase();if(description.includes('clear')||description.includes('sunny'))rating+=1;else if(description.includes('rain')||description.includes('storm'))rating-=2;else if(description.includes('cloudy')||description.includes('overcast'))rating-=1;return Math.max(1,Math.min(10,rating));}// Get wind direction from degrees\ngetWindDirection(degrees){const directions=['N','NNE','NE','ENE','E','ESE','SE','SSE','S','SSW','SW','WSW','W','WNW','NW','NNW'];const index=Math.round(degrees/22.5)%16;return directions[index];}// Mock weather data for when API is unavailable\ngetMockWeatherData(){return{temperature:22,feelsLike:24,humidity:65,windSpeed:18,windDirection:'SE',description:'Partly cloudy',icon:'02d',pressure:1013,visibility:10,timestamp:new Date().toLocaleTimeString(),location:'Sydney Harbour',waterSportsRating:8};}// Mock forecast data\ngetMockForecastData(){return[{date:new Date(Date.now()+24*60*60*1000),temperature:23,windSpeed:20,description:'Sunny',icon:'01d',waterSportsRating:9},{date:new Date(Date.now()+2*24*60*60*1000),temperature:21,windSpeed:15,description:'Partly cloudy',icon:'02d',waterSportsRating:7},{date:new Date(Date.now()+3*24*60*60*1000),temperature:19,windSpeed:25,description:'Windy',icon:'03d',waterSportsRating:6}];}// Get water sports recommendations based on weather\ngetWaterSportsRecommendations(weatherData){const rating=weatherData.waterSportsRating;const windSpeed=weatherData.windSpeed;const temp=weatherData.temperature;let recommendations=[];if(rating>=8){recommendations.push('Excellent conditions for all water sports!');if(windSpeed>=15&&windSpeed<=25){recommendations.push('Perfect kitesurfing conditions');}if(temp>=20){recommendations.push('Great for swimming and snorkeling');}}else if(rating>=6){recommendations.push('Good conditions with some caution');if(windSpeed>25){recommendations.push('High winds - experienced riders only');}}else if(rating>=4){recommendations.push('Moderate conditions - check with instructors');if(windSpeed<10){recommendations.push('Low wind - may need different activities');}}else{recommendations.push('Challenging conditions - consider indoor alternatives');}return recommendations;}}export default new WeatherService();","map":{"version":3,"names":["getApiKey","WeatherService","constructor","apiKey","baseUrl","getCurrentWeather","lat","arguments","length","undefined","lon","response","fetch","concat","ok","Error","data","json","formatWeatherData","error","console","getMockWeatherData","getWeatherForecast","formatForecastData","getMockForecastData","temperature","Math","round","main","temp","feelsLike","feels_like","humidity","windSpeed","wind","speed","windDirection","getWindDirection","deg","description","weather","icon","pressure","visibility","timestamp","Date","toLocaleTimeString","location","waterSportsRating","calculateWaterSportsRating","dailyForecasts","dailyData","list","forEach","item","date","dt","day","toDateString","push","Object","keys","dayData","avgTemp","reduce","sum","avgWind","slice","weatherData","rating","toLowerCase","includes","max","min","degrees","directions","index","now","getWaterSportsRecommendations","recommendations"],"sources":["/Users/sujaljoshi/Desktop/MpT/frontend/src/services/weatherService.js"],"sourcesContent":["// Weather Service for MPT Application\n// This service fetches real weather data for water sports activities\n\nimport { getApiKey } from '../config/apiKeys';\n\nclass WeatherService {\n  constructor() {\n    // Using OpenWeatherMap API (free tier)\n    // You can get a free API key from: https://openweathermap.org/api\n    this.apiKey = getApiKey('OPENWEATHER') || 'DEMO_KEY'; // Use configured key or fallback\n    this.baseUrl = 'https://api.openweathermap.org/data/2.5';\n  }\n\n  // Get current weather for a specific location\n  async getCurrentWeather(lat = -33.8688, lon = 151.2093) { // Default: Sydney, Australia\n    try {\n      const response = await fetch(\n        `${this.baseUrl}/weather?lat=${lat}&lon=${lon}&appid=${this.apiKey}&units=metric`\n      );\n      \n      if (!response.ok) {\n        throw new Error('Weather data unavailable');\n      }\n      \n      const data = await response.json();\n      return this.formatWeatherData(data);\n    } catch (error) {\n      console.error('Error fetching weather:', error);\n      return this.getMockWeatherData(); // Fallback to mock data\n    }\n  }\n\n  // Get weather forecast for the next few days\n  async getWeatherForecast(lat = -33.8688, lon = 151.2093) {\n    try {\n      const response = await fetch(\n        `${this.baseUrl}/forecast?lat=${lat}&lon=${lon}&appid=${this.apiKey}&units=metric`\n      );\n      \n      if (!response.ok) {\n        throw new Error('Forecast data unavailable');\n      }\n      \n      const data = await response.json();\n      return this.formatForecastData(data);\n    } catch (error) {\n      console.error('Error fetching forecast:', error);\n      return this.getMockForecastData(); // Fallback to mock data\n    }\n  }\n\n  // Format current weather data for display\n  formatWeatherData(data) {\n    return {\n      temperature: Math.round(data.main.temp),\n      feelsLike: Math.round(data.main.feels_like),\n      humidity: data.main.humidity,\n      windSpeed: Math.round(data.wind.speed * 3.6), // Convert m/s to km/h\n      windDirection: this.getWindDirection(data.wind.deg),\n      description: data.weather[0].description,\n      icon: data.weather[0].icon,\n      pressure: data.main.pressure,\n      visibility: data.visibility / 1000, // Convert to km\n      timestamp: new Date().toLocaleTimeString(),\n      location: 'Sydney Harbour', // Default location\n      waterSportsRating: this.calculateWaterSportsRating(data)\n    };\n  }\n\n  // Format forecast data for display\n  formatForecastData(data) {\n    const dailyForecasts = [];\n    \n    // Group forecasts by day\n    const dailyData = {};\n    data.list.forEach(item => {\n      const date = new Date(item.dt * 1000);\n      const day = date.toDateString();\n      \n      if (!dailyData[day]) {\n        dailyData[day] = [];\n      }\n      dailyData[day].push(item);\n    });\n\n    // Get daily averages\n    Object.keys(dailyData).forEach(day => {\n      const dayData = dailyData[day];\n      const avgTemp = dayData.reduce((sum, item) => sum + item.main.temp, 0) / dayData.length;\n      const avgWind = dayData.reduce((sum, item) => sum + item.wind.speed, 0) / dayData.length;\n      const description = dayData[0].weather[0].description;\n      \n      dailyForecasts.push({\n        date: new Date(day),\n        temperature: Math.round(avgTemp),\n        windSpeed: Math.round(avgWind * 3.6),\n        description: description,\n        icon: dayData[0].weather[0].icon,\n        waterSportsRating: this.calculateWaterSportsRating({\n          main: { temp: avgTemp },\n          wind: { speed: avgWind },\n          weather: [{ description: description }]\n        })\n      });\n    });\n\n    return dailyForecasts.slice(0, 5); // Return next 5 days\n  }\n\n  // Calculate water sports suitability rating (1-10)\n  calculateWaterSportsRating(weatherData) {\n    let rating = 5; // Base rating\n    \n    // Temperature factor (ideal: 20-30Â°C)\n    const temp = weatherData.main.temp;\n    if (temp >= 20 && temp <= 30) rating += 2;\n    else if (temp >= 15 && temp <= 35) rating += 1;\n    else if (temp < 10 || temp > 40) rating -= 2;\n    \n    // Wind factor (ideal: 15-25 km/h for kitesurfing)\n    const windSpeed = weatherData.wind.speed * 3.6;\n    if (windSpeed >= 15 && windSpeed <= 25) rating += 3;\n    else if (windSpeed >= 10 && windSpeed <= 30) rating += 1;\n    else if (windSpeed < 5 || windSpeed > 40) rating -= 2;\n    \n    // Weather condition factor\n    const description = weatherData.weather[0].description.toLowerCase();\n    if (description.includes('clear') || description.includes('sunny')) rating += 1;\n    else if (description.includes('rain') || description.includes('storm')) rating -= 2;\n    else if (description.includes('cloudy') || description.includes('overcast')) rating -= 1;\n    \n    return Math.max(1, Math.min(10, rating));\n  }\n\n  // Get wind direction from degrees\n  getWindDirection(degrees) {\n    const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];\n    const index = Math.round(degrees / 22.5) % 16;\n    return directions[index];\n  }\n\n  // Mock weather data for when API is unavailable\n  getMockWeatherData() {\n    return {\n      temperature: 22,\n      feelsLike: 24,\n      humidity: 65,\n      windSpeed: 18,\n      windDirection: 'SE',\n      description: 'Partly cloudy',\n      icon: '02d',\n      pressure: 1013,\n      visibility: 10,\n      timestamp: new Date().toLocaleTimeString(),\n      location: 'Sydney Harbour',\n      waterSportsRating: 8\n    };\n  }\n\n  // Mock forecast data\n  getMockForecastData() {\n    return [\n      {\n        date: new Date(Date.now() + 24 * 60 * 60 * 1000),\n        temperature: 23,\n        windSpeed: 20,\n        description: 'Sunny',\n        icon: '01d',\n        waterSportsRating: 9\n      },\n      {\n        date: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000),\n        temperature: 21,\n        windSpeed: 15,\n        description: 'Partly cloudy',\n        icon: '02d',\n        waterSportsRating: 7\n      },\n      {\n        date: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),\n        temperature: 19,\n        windSpeed: 25,\n        description: 'Windy',\n        icon: '03d',\n        waterSportsRating: 6\n      }\n    ];\n  }\n\n  // Get water sports recommendations based on weather\n  getWaterSportsRecommendations(weatherData) {\n    const rating = weatherData.waterSportsRating;\n    const windSpeed = weatherData.windSpeed;\n    const temp = weatherData.temperature;\n\n    let recommendations = [];\n    \n    if (rating >= 8) {\n      recommendations.push('Excellent conditions for all water sports!');\n      if (windSpeed >= 15 && windSpeed <= 25) {\n        recommendations.push('Perfect kitesurfing conditions');\n      }\n      if (temp >= 20) {\n        recommendations.push('Great for swimming and snorkeling');\n      }\n    } else if (rating >= 6) {\n      recommendations.push('Good conditions with some caution');\n      if (windSpeed > 25) {\n        recommendations.push('High winds - experienced riders only');\n      }\n    } else if (rating >= 4) {\n      recommendations.push('Moderate conditions - check with instructors');\n      if (windSpeed < 10) {\n        recommendations.push('Low wind - may need different activities');\n      }\n    } else {\n      recommendations.push('Challenging conditions - consider indoor alternatives');\n    }\n\n    return recommendations;\n  }\n}\n\nexport default new WeatherService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}