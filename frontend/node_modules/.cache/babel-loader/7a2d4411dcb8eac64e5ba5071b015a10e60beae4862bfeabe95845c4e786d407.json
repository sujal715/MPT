{"ast":null,"code":"import apiService from'./api';class AuthService{// Login user\nasync login(credentials){try{const response=await apiService.post('/auth/login',credentials);if(response.token){apiService.setToken(response.token);return response;}throw new Error('Login failed - no token received');}catch(error){throw error;}}// Logout user\nasync logout(){try{// Call logout endpoint if your backend has one\nawait apiService.post('/auth/logout');}catch(error){console.log('Logout error:',error);}finally{// Always clear local token\napiService.removeToken();}}// Check if user is authenticated\nisAuthenticated(){return!!apiService.token;}// Get current user info\nasync getCurrentUser(){try{return await apiService.get('/auth/me');}catch(error){throw error;}}// Refresh token\nasync refreshToken(){try{const response=await apiService.post('/auth/refresh');if(response.token){apiService.setToken(response.token);return response;}throw new Error('Token refresh failed');}catch(error){throw error;}}}export default new AuthService();","map":{"version":3,"names":["apiService","AuthService","login","credentials","response","post","token","setToken","Error","error","logout","console","log","removeToken","isAuthenticated","getCurrentUser","get","refreshToken"],"sources":["/Users/sujaljoshi/Desktop/MpT/frontend/src/services/authService.js"],"sourcesContent":["import apiService from './api';\n\nclass AuthService {\n  // Login user\n  async login(credentials) {\n    try {\n      const response = await apiService.post('/auth/login', credentials);\n      \n      if (response.token) {\n        apiService.setToken(response.token);\n        return response;\n      }\n      \n      throw new Error('Login failed - no token received');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Logout user\n  async logout() {\n    try {\n      // Call logout endpoint if your backend has one\n      await apiService.post('/auth/logout');\n    } catch (error) {\n      console.log('Logout error:', error);\n    } finally {\n      // Always clear local token\n      apiService.removeToken();\n    }\n  }\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!apiService.token;\n  }\n\n  // Get current user info\n  async getCurrentUser() {\n    try {\n      return await apiService.get('/auth/me');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Refresh token\n  async refreshToken() {\n    try {\n      const response = await apiService.post('/auth/refresh');\n      if (response.token) {\n        apiService.setToken(response.token);\n        return response;\n      }\n      throw new Error('Token refresh failed');\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport default new AuthService();\n\n\n\n\n"],"mappings":"AAAA,MAAO,CAAAA,UAAU,KAAM,OAAO,CAE9B,KAAM,CAAAC,WAAY,CAChB;AACA,KAAM,CAAAC,KAAKA,CAACC,WAAW,CAAE,CACvB,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAJ,UAAU,CAACK,IAAI,CAAC,aAAa,CAAEF,WAAW,CAAC,CAElE,GAAIC,QAAQ,CAACE,KAAK,CAAE,CAClBN,UAAU,CAACO,QAAQ,CAACH,QAAQ,CAACE,KAAK,CAAC,CACnC,MAAO,CAAAF,QAAQ,CACjB,CAEA,KAAM,IAAI,CAAAI,KAAK,CAAC,kCAAkC,CAAC,CACrD,CAAE,MAAOC,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAC,MAAMA,CAAA,CAAG,CACb,GAAI,CACF;AACA,KAAM,CAAAV,UAAU,CAACK,IAAI,CAAC,cAAc,CAAC,CACvC,CAAE,MAAOI,KAAK,CAAE,CACdE,OAAO,CAACC,GAAG,CAAC,eAAe,CAAEH,KAAK,CAAC,CACrC,CAAC,OAAS,CACR;AACAT,UAAU,CAACa,WAAW,CAAC,CAAC,CAC1B,CACF,CAEA;AACAC,eAAeA,CAAA,CAAG,CAChB,MAAO,CAAC,CAACd,UAAU,CAACM,KAAK,CAC3B,CAEA;AACA,KAAM,CAAAS,cAAcA,CAAA,CAAG,CACrB,GAAI,CACF,MAAO,MAAM,CAAAf,UAAU,CAACgB,GAAG,CAAC,UAAU,CAAC,CACzC,CAAE,MAAOP,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAQ,YAAYA,CAAA,CAAG,CACnB,GAAI,CACF,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAJ,UAAU,CAACK,IAAI,CAAC,eAAe,CAAC,CACvD,GAAID,QAAQ,CAACE,KAAK,CAAE,CAClBN,UAAU,CAACO,QAAQ,CAACH,QAAQ,CAACE,KAAK,CAAC,CACnC,MAAO,CAAAF,QAAQ,CACjB,CACA,KAAM,IAAI,CAAAI,KAAK,CAAC,sBAAsB,CAAC,CACzC,CAAE,MAAOC,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CACF,CAEA,cAAe,IAAI,CAAAR,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}