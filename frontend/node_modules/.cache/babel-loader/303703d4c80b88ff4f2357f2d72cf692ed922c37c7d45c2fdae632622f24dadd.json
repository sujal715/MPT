{"ast":null,"code":"import apiService from'./api';// Fallback data for when backend is not available\nconst fallbackGallery=[{id:1,title:\"Training Session 1\",category:\"training\",imageUrl:\"https://via.placeholder.com/300x200\",description:\"High-intensity training session\"},{id:2,title:\"Training Session 2\",category:\"training\",imageUrl:\"https://via.placeholder.com/300x200\",description:\"Strength training workout\"},{id:3,title:\"Facility Tour\",category:\"facility\",imageUrl:\"https://via.placeholder.com/300x200\",description:\"State-of-the-art fitness equipment\"}];const fallbackCategories=[\"training\",\"facility\",\"nutrition\",\"wellness\"];export const galleryService={// Get all gallery items\nasync getAllItems(){try{return await apiService.get('/gallery');}catch(error){console.log('Using fallback gallery data due to API error:',error.message);return{success:true,data:fallbackGallery};}},// Get items by category\nasync getItemsByCategory(category){try{return await apiService.get(\"/gallery/category/\".concat(category));}catch(error){console.log('Using fallback gallery data by category due to API error:',error.message);const filteredItems=fallbackGallery.filter(item=>item.category===category);return{success:true,data:filteredItems};}},// Get item by ID\nasync getItemById(id){try{return await apiService.get(\"/gallery/\".concat(id));}catch(error){console.log('Using fallback gallery item due to API error:',error.message);const item=fallbackGallery.find(item=>item.id===parseInt(id));return item?{success:true,data:item}:{success:false,error:'Item not found'};}},// Create new item\nasync createItem(itemData){try{return await apiService.post('/gallery',itemData);}catch(error){console.log('Gallery item creation failed due to API error:',error.message);return{success:false,error:'Item creation failed - using fallback mode'};}},// Update item\nasync updateItem(id,itemData){try{return await apiService.put(\"/gallery/\".concat(id),itemData);}catch(error){console.log('Gallery item update failed due to API error:',error.message);return{success:false,error:'Item update failed - using fallback mode'};}},// Delete item\nasync deleteItem(id){try{return await apiService.delete(\"/gallery/\".concat(id));}catch(error){console.log('Gallery item deletion failed due to API error:',error.message);return{success:false,error:'Item deletion failed - using fallback mode'};}},// Upload file\nasync uploadFile(endpoint,file,metadata){try{return await apiService.uploadFile(endpoint,file,metadata);}catch(error){console.log('File upload failed due to API error:',error.message);return{success:false,error:'File upload failed - using fallback mode'};}},// Get categories\nasync getCategories(){try{return await apiService.get('/gallery/categories');}catch(error){console.log('Using fallback gallery categories due to API error:',error.message);return{success:true,data:fallbackCategories};}}};","map":{"version":3,"names":["apiService","fallbackGallery","id","title","category","imageUrl","description","fallbackCategories","galleryService","getAllItems","get","error","console","log","message","success","data","getItemsByCategory","concat","filteredItems","filter","item","getItemById","find","parseInt","createItem","itemData","post","updateItem","put","deleteItem","delete","uploadFile","endpoint","file","metadata","getCategories"],"sources":["/Users/sujaljoshi/Desktop/MpT/frontend/src/services/galleryService.js"],"sourcesContent":["import apiService from './api';\n\n// Fallback data for when backend is not available\nconst fallbackGallery = [\n  {\n    id: 1,\n    title: \"Training Session 1\",\n    category: \"training\",\n    imageUrl: \"https://via.placeholder.com/300x200\",\n    description: \"High-intensity training session\"\n  },\n  {\n    id: 2,\n    title: \"Training Session 2\",\n    category: \"training\",\n    imageUrl: \"https://via.placeholder.com/300x200\",\n    description: \"Strength training workout\"\n  },\n  {\n    id: 3,\n    title: \"Facility Tour\",\n    category: \"facility\",\n    imageUrl: \"https://via.placeholder.com/300x200\",\n    description: \"State-of-the-art fitness equipment\"\n  }\n];\n\nconst fallbackCategories = [\"training\", \"facility\", \"nutrition\", \"wellness\"];\n\nexport const galleryService = {\n  // Get all gallery items\n  async getAllItems() {\n    try {\n      return await apiService.get('/gallery');\n    } catch (error) {\n      console.log('Using fallback gallery data due to API error:', error.message);\n      return { success: true, data: fallbackGallery };\n    }\n  },\n\n  // Get items by category\n  async getItemsByCategory(category) {\n    try {\n      return await apiService.get(`/gallery/category/${category}`);\n    } catch (error) {\n      console.log('Using fallback gallery data by category due to API error:', error.message);\n      const filteredItems = fallbackGallery.filter(item => item.category === category);\n      return { success: true, data: filteredItems };\n    }\n  },\n\n  // Get item by ID\n  async getItemById(id) {\n    try {\n      return await apiService.get(`/gallery/${id}`);\n    } catch (error) {\n      console.log('Using fallback gallery item due to API error:', error.message);\n      const item = fallbackGallery.find(item => item.id === parseInt(id));\n      return item ? { success: true, data: item } : { success: false, error: 'Item not found' };\n    }\n  },\n\n  // Create new item\n  async createItem(itemData) {\n    try {\n      return await apiService.post('/gallery', itemData);\n    } catch (error) {\n      console.log('Gallery item creation failed due to API error:', error.message);\n      return { success: false, error: 'Item creation failed - using fallback mode' };\n    }\n  },\n\n  // Update item\n  async updateItem(id, itemData) {\n    try {\n      return await apiService.put(`/gallery/${id}`, itemData);\n    } catch (error) {\n      console.log('Gallery item update failed due to API error:', error.message);\n      return { success: false, error: 'Item update failed - using fallback mode' };\n    }\n  },\n\n  // Delete item\n  async deleteItem(id) {\n    try {\n      return await apiService.delete(`/gallery/${id}`);\n    } catch (error) {\n      console.log('Gallery item deletion failed due to API error:', error.message);\n      return { success: false, error: 'Item deletion failed - using fallback mode' };\n    }\n  },\n\n  // Upload file\n  async uploadFile(endpoint, file, metadata) {\n    try {\n      return await apiService.uploadFile(endpoint, file, metadata);\n    } catch (error) {\n      console.log('File upload failed due to API error:', error.message);\n      return { success: false, error: 'File upload failed - using fallback mode' };\n    }\n  },\n\n  // Get categories\n  async getCategories() {\n    try {\n      return await apiService.get('/gallery/categories');\n    } catch (error) {\n      console.log('Using fallback gallery categories due to API error:', error.message);\n      return { success: true, data: fallbackCategories };\n    }\n  }\n};\n\n\n\n\n"],"mappings":"AAAA,MAAO,CAAAA,UAAU,KAAM,OAAO,CAE9B;AACA,KAAM,CAAAC,eAAe,CAAG,CACtB,CACEC,EAAE,CAAE,CAAC,CACLC,KAAK,CAAE,oBAAoB,CAC3BC,QAAQ,CAAE,UAAU,CACpBC,QAAQ,CAAE,qCAAqC,CAC/CC,WAAW,CAAE,iCACf,CAAC,CACD,CACEJ,EAAE,CAAE,CAAC,CACLC,KAAK,CAAE,oBAAoB,CAC3BC,QAAQ,CAAE,UAAU,CACpBC,QAAQ,CAAE,qCAAqC,CAC/CC,WAAW,CAAE,2BACf,CAAC,CACD,CACEJ,EAAE,CAAE,CAAC,CACLC,KAAK,CAAE,eAAe,CACtBC,QAAQ,CAAE,UAAU,CACpBC,QAAQ,CAAE,qCAAqC,CAC/CC,WAAW,CAAE,oCACf,CAAC,CACF,CAED,KAAM,CAAAC,kBAAkB,CAAG,CAAC,UAAU,CAAE,UAAU,CAAE,WAAW,CAAE,UAAU,CAAC,CAE5E,MAAO,MAAM,CAAAC,cAAc,CAAG,CAC5B;AACA,KAAM,CAAAC,WAAWA,CAAA,CAAG,CAClB,GAAI,CACF,MAAO,MAAM,CAAAT,UAAU,CAACU,GAAG,CAAC,UAAU,CAAC,CACzC,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAEF,KAAK,CAACG,OAAO,CAAC,CAC3E,MAAO,CAAEC,OAAO,CAAE,IAAI,CAAEC,IAAI,CAAEf,eAAgB,CAAC,CACjD,CACF,CAAC,CAED;AACA,KAAM,CAAAgB,kBAAkBA,CAACb,QAAQ,CAAE,CACjC,GAAI,CACF,MAAO,MAAM,CAAAJ,UAAU,CAACU,GAAG,sBAAAQ,MAAA,CAAsBd,QAAQ,CAAE,CAAC,CAC9D,CAAE,MAAOO,KAAK,CAAE,CACdC,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAEF,KAAK,CAACG,OAAO,CAAC,CACvF,KAAM,CAAAK,aAAa,CAAGlB,eAAe,CAACmB,MAAM,CAACC,IAAI,EAAIA,IAAI,CAACjB,QAAQ,GAAKA,QAAQ,CAAC,CAChF,MAAO,CAAEW,OAAO,CAAE,IAAI,CAAEC,IAAI,CAAEG,aAAc,CAAC,CAC/C,CACF,CAAC,CAED;AACA,KAAM,CAAAG,WAAWA,CAACpB,EAAE,CAAE,CACpB,GAAI,CACF,MAAO,MAAM,CAAAF,UAAU,CAACU,GAAG,aAAAQ,MAAA,CAAahB,EAAE,CAAE,CAAC,CAC/C,CAAE,MAAOS,KAAK,CAAE,CACdC,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAEF,KAAK,CAACG,OAAO,CAAC,CAC3E,KAAM,CAAAO,IAAI,CAAGpB,eAAe,CAACsB,IAAI,CAACF,IAAI,EAAIA,IAAI,CAACnB,EAAE,GAAKsB,QAAQ,CAACtB,EAAE,CAAC,CAAC,CACnE,MAAO,CAAAmB,IAAI,CAAG,CAAEN,OAAO,CAAE,IAAI,CAAEC,IAAI,CAAEK,IAAK,CAAC,CAAG,CAAEN,OAAO,CAAE,KAAK,CAAEJ,KAAK,CAAE,gBAAiB,CAAC,CAC3F,CACF,CAAC,CAED;AACA,KAAM,CAAAc,UAAUA,CAACC,QAAQ,CAAE,CACzB,GAAI,CACF,MAAO,MAAM,CAAA1B,UAAU,CAAC2B,IAAI,CAAC,UAAU,CAAED,QAAQ,CAAC,CACpD,CAAE,MAAOf,KAAK,CAAE,CACdC,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAEF,KAAK,CAACG,OAAO,CAAC,CAC5E,MAAO,CAAEC,OAAO,CAAE,KAAK,CAAEJ,KAAK,CAAE,4CAA6C,CAAC,CAChF,CACF,CAAC,CAED;AACA,KAAM,CAAAiB,UAAUA,CAAC1B,EAAE,CAAEwB,QAAQ,CAAE,CAC7B,GAAI,CACF,MAAO,MAAM,CAAA1B,UAAU,CAAC6B,GAAG,aAAAX,MAAA,CAAahB,EAAE,EAAIwB,QAAQ,CAAC,CACzD,CAAE,MAAOf,KAAK,CAAE,CACdC,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAEF,KAAK,CAACG,OAAO,CAAC,CAC1E,MAAO,CAAEC,OAAO,CAAE,KAAK,CAAEJ,KAAK,CAAE,0CAA2C,CAAC,CAC9E,CACF,CAAC,CAED;AACA,KAAM,CAAAmB,UAAUA,CAAC5B,EAAE,CAAE,CACnB,GAAI,CACF,MAAO,MAAM,CAAAF,UAAU,CAAC+B,MAAM,aAAAb,MAAA,CAAahB,EAAE,CAAE,CAAC,CAClD,CAAE,MAAOS,KAAK,CAAE,CACdC,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAEF,KAAK,CAACG,OAAO,CAAC,CAC5E,MAAO,CAAEC,OAAO,CAAE,KAAK,CAAEJ,KAAK,CAAE,4CAA6C,CAAC,CAChF,CACF,CAAC,CAED;AACA,KAAM,CAAAqB,UAAUA,CAACC,QAAQ,CAAEC,IAAI,CAAEC,QAAQ,CAAE,CACzC,GAAI,CACF,MAAO,MAAM,CAAAnC,UAAU,CAACgC,UAAU,CAACC,QAAQ,CAAEC,IAAI,CAAEC,QAAQ,CAAC,CAC9D,CAAE,MAAOxB,KAAK,CAAE,CACdC,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAEF,KAAK,CAACG,OAAO,CAAC,CAClE,MAAO,CAAEC,OAAO,CAAE,KAAK,CAAEJ,KAAK,CAAE,0CAA2C,CAAC,CAC9E,CACF,CAAC,CAED;AACA,KAAM,CAAAyB,aAAaA,CAAA,CAAG,CACpB,GAAI,CACF,MAAO,MAAM,CAAApC,UAAU,CAACU,GAAG,CAAC,qBAAqB,CAAC,CACpD,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAEF,KAAK,CAACG,OAAO,CAAC,CACjF,MAAO,CAAEC,OAAO,CAAE,IAAI,CAAEC,IAAI,CAAET,kBAAmB,CAAC,CACpD,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}