{"ast":null,"code":"import apiService from'./api';// Fallback data for when backend is not available\nconst fallbackServices=[{id:1,name:\"Personal Training\",description:\"One-on-one training sessions with certified trainers\",price:\"$99/hour\",duration:\"1 hour\",category:\"training\"},{id:2,name:\"Group Classes\",description:\"High-energy group fitness classes for all levels\",price:\"$25/class\",duration:\"45 minutes\",category:\"group\"},{id:3,name:\"Nutrition Coaching\",description:\"Personalized diet and nutrition guidance\",price:\"$150/month\",duration:\"Monthly program\",category:\"nutrition\"}];export const servicesService={// Get all services\nasync getAllServices(){try{return await apiService.get('/services');}catch(error){console.log('Using fallback services data due to API error:',error.message);return{success:true,data:fallbackServices};}},// Get service by ID\nasync getServiceById(id){try{return await apiService.get(\"/services/\".concat(id));}catch(error){console.log('Using fallback service data due to API error:',error.message);const service=fallbackServices.find(s=>s.id===parseInt(id));return service?{success:true,data:service}:{success:false,error:'Service not found'};}},// Create new service\nasync createService(serviceData){try{return await apiService.post('/services',serviceData);}catch(error){console.log('Service creation failed due to API error:',error.message);return{success:false,error:'Service creation failed - using fallback mode'};}},// Update service\nasync updateService(id,serviceData){try{return await apiService.put(\"/services/\".concat(id),serviceData);}catch(error){console.log('Service update failed due to API error:',error.message);return{success:false,error:'Service update failed - using fallback mode'};}},// Delete service\nasync deleteService(id){try{return await apiService.delete(\"/services/\".concat(id));}catch(error){console.log('Service deletion failed due to API error:',error.message);return{success:false,error:'Service deletion failed - using fallback mode'};}},// Get services by category\nasync getServicesByCategory(category){try{return await apiService.get(\"/services/category/\".concat(category));}catch(error){console.log('Using fallback services by category due to API error:',error.message);const filteredServices=fallbackServices.filter(s=>s.category===category);return{success:true,data:filteredServices};}},// Get service categories\nasync getServiceCategories(){try{return await apiService.get('/services/categories');}catch(error){console.log('Using fallback categories due to API error:',error.message);const categories=[...new Set(fallbackServices.map(s=>s.category))];return{success:true,data:categories};}}};","map":{"version":3,"names":["apiService","fallbackServices","id","name","description","price","duration","category","servicesService","getAllServices","get","error","console","log","message","success","data","getServiceById","concat","service","find","s","parseInt","createService","serviceData","post","updateService","put","deleteService","delete","getServicesByCategory","filteredServices","filter","getServiceCategories","categories","Set","map"],"sources":["/Users/sujaljoshi/Desktop/MpT/frontend/src/services/servicesService.js"],"sourcesContent":["import apiService from './api';\n\n// Fallback data for when backend is not available\nconst fallbackServices = [\n  {\n    id: 1,\n    name: \"Personal Training\",\n    description: \"One-on-one training sessions with certified trainers\",\n    price: \"$99/hour\",\n    duration: \"1 hour\",\n    category: \"training\"\n  },\n  {\n    id: 2,\n    name: \"Group Classes\",\n    description: \"High-energy group fitness classes for all levels\",\n    price: \"$25/class\",\n    duration: \"45 minutes\",\n    category: \"group\"\n  },\n  {\n    id: 3,\n    name: \"Nutrition Coaching\",\n    description: \"Personalized diet and nutrition guidance\",\n    price: \"$150/month\",\n    duration: \"Monthly program\",\n    category: \"nutrition\"\n  }\n];\n\nexport const servicesService = {\n  // Get all services\n  async getAllServices() {\n    try {\n      return await apiService.get('/services');\n    } catch (error) {\n      console.log('Using fallback services data due to API error:', error.message);\n      return { success: true, data: fallbackServices };\n    }\n  },\n\n  // Get service by ID\n  async getServiceById(id) {\n    try {\n      return await apiService.get(`/services/${id}`);\n    } catch (error) {\n      console.log('Using fallback service data due to API error:', error.message);\n      const service = fallbackServices.find(s => s.id === parseInt(id));\n      return service ? { success: true, data: service } : { success: false, error: 'Service not found' };\n    }\n  },\n\n  // Create new service\n  async createService(serviceData) {\n    try {\n      return await apiService.post('/services', serviceData);\n    } catch (error) {\n      console.log('Service creation failed due to API error:', error.message);\n      return { success: false, error: 'Service creation failed - using fallback mode' };\n    }\n  },\n\n  // Update service\n  async updateService(id, serviceData) {\n    try {\n      return await apiService.put(`/services/${id}`, serviceData);\n    } catch (error) {\n      console.log('Service update failed due to API error:', error.message);\n      return { success: false, error: 'Service update failed - using fallback mode' };\n    }\n  },\n\n  // Delete service\n  async deleteService(id) {\n    try {\n      return await apiService.delete(`/services/${id}`);\n    } catch (error) {\n      console.log('Service deletion failed due to API error:', error.message);\n      return { success: false, error: 'Service deletion failed - using fallback mode' };\n    }\n  },\n\n  // Get services by category\n  async getServicesByCategory(category) {\n    try {\n      return await apiService.get(`/services/category/${category}`);\n    } catch (error) {\n      console.log('Using fallback services by category due to API error:', error.message);\n      const filteredServices = fallbackServices.filter(s => s.category === category);\n      return { success: true, data: filteredServices };\n    }\n  },\n\n  // Get service categories\n  async getServiceCategories() {\n    try {\n      return await apiService.get('/services/categories');\n    } catch (error) {\n      console.log('Using fallback categories due to API error:', error.message);\n      const categories = [...new Set(fallbackServices.map(s => s.category))];\n      return { success: true, data: categories };\n    }\n  }\n};\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}