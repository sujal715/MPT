{"ast":null,"code":"import apiService from'./api';// Fallback data for when backend is not available\nconst fallbackTestimonials=[{testimonialId:1,content:\"Amazing experience! The trainers are professional and the facilities are top-notch.\",rating:5,author:\"John Doe\",date:\"2024-08-27\"},{testimonialId:2,content:\"Great workout session, really pushed my limits in a safe way.\",rating:4,author:\"Jane Smith\",date:\"2024-08-26\"},{testimonialId:3,content:\"Excellent service and very knowledgeable staff.\",rating:5,author:\"Mike Johnson\",date:\"2024-08-25\"},{testimonialId:4,content:\"The premium package was worth every penny. Highly recommend!\",rating:5,author:\"Sarah Wilson\",date:\"2024-08-24\"},{testimonialId:5,content:\"Corporate package exceeded our expectations. Perfect for team building.\",rating:4,author:\"David Brown\",date:\"2024-08-23\"}];export const testimonialsService={// Get all testimonials\nasync getAllTestimonials(){try{return await apiService.get('/public/testimonials');}catch(error){console.log('Using fallback testimonials data due to API error:',error.message);return{success:true,data:fallbackTestimonials};}},// Get testimonial by ID\nasync getTestimonialById(id){try{return await apiService.get(\"/public/testimonials/\".concat(id));}catch(error){console.log('Using fallback testimonial data due to API error:',error.message);const testimonial=fallbackTestimonials.find(t=>t.testimonialId===parseInt(id));return testimonial?{success:true,data:testimonial}:{success:false,error:'Testimonial not found'};}},// Create new testimonial\nasync createTestimonial(testimonialData){try{return await apiService.post('/public/testimonials',testimonialData);}catch(error){console.log('Testimonial creation failed due to API error:',error.message);return{success:false,error:'Testimonial creation failed - using fallback mode'};}},// Update testimonial\nasync updateTestimonial(id,testimonialData){try{return await apiService.put(\"/public/testimonials/\".concat(id),testimonialData);}catch(error){console.log('Testimonial update failed due to API error:',error.message);return{success:false,error:'Testimonial update failed - using fallback mode'};}},// Delete testimonial\nasync deleteTestimonial(id){try{return await apiService.delete(\"/public/testimonials/\".concat(id));}catch(error){console.log('Testimonial deletion failed due to API error:',error.message);return{success:false,error:'Testimonial deletion failed - using fallback mode'};}},// Get featured testimonials\nasync getFeaturedTestimonials(){try{return await apiService.get('/public/testimonials/featured');}catch(error){console.log('Using fallback featured testimonials due to API error:',error.message);const featured=fallbackTestimonials.filter(t=>t.rating===5).slice(0,3);return{success:true,data:featured};}},// Get testimonials by rating\nasync getTestimonialsByRating(rating){try{return await apiService.get(\"/public/testimonials/rating/\".concat(rating));}catch(error){console.log('Using fallback testimonials by rating due to API error:',error.message);const filtered=fallbackTestimonials.filter(t=>t.rating===parseInt(rating));return{success:true,data:filtered};}}};","map":{"version":3,"names":["apiService","fallbackTestimonials","testimonialId","content","rating","author","date","testimonialsService","getAllTestimonials","get","error","console","log","message","success","data","getTestimonialById","id","concat","testimonial","find","t","parseInt","createTestimonial","testimonialData","post","updateTestimonial","put","deleteTestimonial","delete","getFeaturedTestimonials","featured","filter","slice","getTestimonialsByRating","filtered"],"sources":["/Users/sujaljoshi/Desktop/MpT/frontend/src/services/testimonialsService.js"],"sourcesContent":["import apiService from './api';\n\n// Fallback data for when backend is not available\nconst fallbackTestimonials = [\n  {\n    testimonialId: 1,\n    content: \"Amazing experience! The trainers are professional and the facilities are top-notch.\",\n    rating: 5,\n    author: \"John Doe\",\n    date: \"2024-08-27\"\n  },\n  {\n    testimonialId: 2,\n    content: \"Great workout session, really pushed my limits in a safe way.\",\n    rating: 4,\n    author: \"Jane Smith\",\n    date: \"2024-08-26\"\n  },\n  {\n    testimonialId: 3,\n    content: \"Excellent service and very knowledgeable staff.\",\n    rating: 5,\n    author: \"Mike Johnson\",\n    date: \"2024-08-25\"\n  },\n  {\n    testimonialId: 4,\n    content: \"The premium package was worth every penny. Highly recommend!\",\n    rating: 5,\n    author: \"Sarah Wilson\",\n    date: \"2024-08-24\"\n  },\n  {\n    testimonialId: 5,\n    content: \"Corporate package exceeded our expectations. Perfect for team building.\",\n    rating: 4,\n    author: \"David Brown\",\n    date: \"2024-08-23\"\n  }\n];\n\nexport const testimonialsService = {\n  // Get all testimonials\n  async getAllTestimonials() {\n    try {\n      return await apiService.get('/public/testimonials');\n    } catch (error) {\n      console.log('Using fallback testimonials data due to API error:', error.message);\n      return { success: true, data: fallbackTestimonials };\n    }\n  },\n\n  // Get testimonial by ID\n  async getTestimonialById(id) {\n    try {\n      return await apiService.get(`/public/testimonials/${id}`);\n    } catch (error) {\n      console.log('Using fallback testimonial data due to API error:', error.message);\n      const testimonial = fallbackTestimonials.find(t => t.testimonialId === parseInt(id));\n      return testimonial ? { success: true, data: testimonial } : { success: false, error: 'Testimonial not found' };\n    }\n  },\n\n  // Create new testimonial\n  async createTestimonial(testimonialData) {\n    try {\n      return await apiService.post('/public/testimonials', testimonialData);\n    } catch (error) {\n      console.log('Testimonial creation failed due to API error:', error.message);\n      return { success: false, error: 'Testimonial creation failed - using fallback mode' };\n    }\n  },\n\n  // Update testimonial\n  async updateTestimonial(id, testimonialData) {\n    try {\n      return await apiService.put(`/public/testimonials/${id}`, testimonialData);\n    } catch (error) {\n      console.log('Testimonial update failed due to API error:', error.message);\n      return { success: false, error: 'Testimonial update failed - using fallback mode' };\n    }\n  },\n\n  // Delete testimonial\n  async deleteTestimonial(id) {\n    try {\n      return await apiService.delete(`/public/testimonials/${id}`);\n    } catch (error) {\n      console.log('Testimonial deletion failed due to API error:', error.message);\n      return { success: false, error: 'Testimonial deletion failed - using fallback mode' };\n    }\n  },\n\n  // Get featured testimonials\n  async getFeaturedTestimonials() {\n    try {\n      return await apiService.get('/public/testimonials/featured');\n    } catch (error) {\n      console.log('Using fallback featured testimonials due to API error:', error.message);\n      const featured = fallbackTestimonials.filter(t => t.rating === 5).slice(0, 3);\n      return { success: true, data: featured };\n    }\n  },\n\n  // Get testimonials by rating\n  async getTestimonialsByRating(rating) {\n    try {\n      return await apiService.get(`/public/testimonials/rating/${rating}`);\n    } catch (error) {\n      console.log('Using fallback testimonials by rating due to API error:', error.message);\n      const filtered = fallbackTestimonials.filter(t => t.rating === parseInt(rating));\n      return { success: true, data: filtered };\n    }\n  }\n};\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}