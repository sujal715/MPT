{"ast":null,"code":"import apiService from'./api';class BookingsService{// Get all bookings (admin only)\nasync getAllBookings(){try{return await apiService.get('/bookings');}catch(error){throw error;}}// Get booking by ID\nasync getBooking(id){try{return await apiService.get(\"/bookings/\".concat(id));}catch(error){throw error;}}// Create new booking\nasync createBooking(bookingData){try{return await apiService.post('/bookings',bookingData);}catch(error){throw error;}}// Update booking (admin only)\nasync updateBooking(id,bookingData){try{return await apiService.put(\"/bookings/\".concat(id),bookingData);}catch(error){throw error;}}// Delete booking (admin only)\nasync deleteBooking(id){try{return await apiService.delete(\"/bookings/\".concat(id));}catch(error){throw error;}}// Get user's own bookings\nasync getUserBookings(){try{return await apiService.get('/bookings/user');}catch(error){throw error;}}// Get bookings by status\nasync getBookingsByStatus(status){try{return await apiService.get(\"/bookings/status/\".concat(status));}catch(error){throw error;}}// Get available time slots\nasync getAvailableTimeSlots(date){try{return await apiService.get(\"/bookings/available-slots?date=\".concat(date));}catch(error){throw error;}}// Cancel booking\nasync cancelBooking(id){try{return await apiService.put(\"/bookings/\".concat(id,\"/cancel\"));}catch(error){throw error;}}// Reschedule booking\nasync rescheduleBooking(id,newDateTime){try{return await apiService.put(\"/bookings/\".concat(id,\"/reschedule\"),{newDateTime});}catch(error){throw error;}}// Get booking statistics (admin only)\nasync getBookingStats(){try{return await apiService.get('/bookings/stats');}catch(error){throw error;}}}export default new BookingsService();","map":{"version":3,"names":["apiService","BookingsService","getAllBookings","get","error","getBooking","id","concat","createBooking","bookingData","post","updateBooking","put","deleteBooking","delete","getUserBookings","getBookingsByStatus","status","getAvailableTimeSlots","date","cancelBooking","rescheduleBooking","newDateTime","getBookingStats"],"sources":["/Users/sujaljoshi/Desktop/MpT/frontend/src/services/bookingsService.js"],"sourcesContent":["import apiService from './api';\n\nclass BookingsService {\n  // Get all bookings (admin only)\n  async getAllBookings() {\n    try {\n      return await apiService.get('/bookings');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get booking by ID\n  async getBooking(id) {\n    try {\n      return await apiService.get(`/bookings/${id}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Create new booking\n  async createBooking(bookingData) {\n    try {\n      return await apiService.post('/bookings', bookingData);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Update booking (admin only)\n  async updateBooking(id, bookingData) {\n    try {\n      return await apiService.put(`/bookings/${id}`, bookingData);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Delete booking (admin only)\n  async deleteBooking(id) {\n    try {\n      return await apiService.delete(`/bookings/${id}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get user's own bookings\n  async getUserBookings() {\n    try {\n      return await apiService.get('/bookings/user');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get bookings by status\n  async getBookingsByStatus(status) {\n    try {\n      return await apiService.get(`/bookings/status/${status}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get available time slots\n  async getAvailableTimeSlots(date) {\n    try {\n      return await apiService.get(`/bookings/available-slots?date=${date}`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Cancel booking\n  async cancelBooking(id) {\n    try {\n      return await apiService.put(`/bookings/${id}/cancel`);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Reschedule booking\n  async rescheduleBooking(id, newDateTime) {\n    try {\n      return await apiService.put(`/bookings/${id}/reschedule`, { newDateTime });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // Get booking statistics (admin only)\n  async getBookingStats() {\n    try {\n      return await apiService.get('/bookings/stats');\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport default new BookingsService();\n\n\n\n\n"],"mappings":"AAAA,MAAO,CAAAA,UAAU,KAAM,OAAO,CAE9B,KAAM,CAAAC,eAAgB,CACpB;AACA,KAAM,CAAAC,cAAcA,CAAA,CAAG,CACrB,GAAI,CACF,MAAO,MAAM,CAAAF,UAAU,CAACG,GAAG,CAAC,WAAW,CAAC,CAC1C,CAAE,MAAOC,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAC,UAAUA,CAACC,EAAE,CAAE,CACnB,GAAI,CACF,MAAO,MAAM,CAAAN,UAAU,CAACG,GAAG,cAAAI,MAAA,CAAcD,EAAE,CAAE,CAAC,CAChD,CAAE,MAAOF,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAI,aAAaA,CAACC,WAAW,CAAE,CAC/B,GAAI,CACF,MAAO,MAAM,CAAAT,UAAU,CAACU,IAAI,CAAC,WAAW,CAAED,WAAW,CAAC,CACxD,CAAE,MAAOL,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAO,aAAaA,CAACL,EAAE,CAAEG,WAAW,CAAE,CACnC,GAAI,CACF,MAAO,MAAM,CAAAT,UAAU,CAACY,GAAG,cAAAL,MAAA,CAAcD,EAAE,EAAIG,WAAW,CAAC,CAC7D,CAAE,MAAOL,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAS,aAAaA,CAACP,EAAE,CAAE,CACtB,GAAI,CACF,MAAO,MAAM,CAAAN,UAAU,CAACc,MAAM,cAAAP,MAAA,CAAcD,EAAE,CAAE,CAAC,CACnD,CAAE,MAAOF,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAW,eAAeA,CAAA,CAAG,CACtB,GAAI,CACF,MAAO,MAAM,CAAAf,UAAU,CAACG,GAAG,CAAC,gBAAgB,CAAC,CAC/C,CAAE,MAAOC,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAY,mBAAmBA,CAACC,MAAM,CAAE,CAChC,GAAI,CACF,MAAO,MAAM,CAAAjB,UAAU,CAACG,GAAG,qBAAAI,MAAA,CAAqBU,MAAM,CAAE,CAAC,CAC3D,CAAE,MAAOb,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAc,qBAAqBA,CAACC,IAAI,CAAE,CAChC,GAAI,CACF,MAAO,MAAM,CAAAnB,UAAU,CAACG,GAAG,mCAAAI,MAAA,CAAmCY,IAAI,CAAE,CAAC,CACvE,CAAE,MAAOf,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAgB,aAAaA,CAACd,EAAE,CAAE,CACtB,GAAI,CACF,MAAO,MAAM,CAAAN,UAAU,CAACY,GAAG,cAAAL,MAAA,CAAcD,EAAE,WAAS,CAAC,CACvD,CAAE,MAAOF,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAiB,iBAAiBA,CAACf,EAAE,CAAEgB,WAAW,CAAE,CACvC,GAAI,CACF,MAAO,MAAM,CAAAtB,UAAU,CAACY,GAAG,cAAAL,MAAA,CAAcD,EAAE,gBAAe,CAAEgB,WAAY,CAAC,CAAC,CAC5E,CAAE,MAAOlB,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAmB,eAAeA,CAAA,CAAG,CACtB,GAAI,CACF,MAAO,MAAM,CAAAvB,UAAU,CAACG,GAAG,CAAC,iBAAiB,CAAC,CAChD,CAAE,MAAOC,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CACF,CAEA,cAAe,IAAI,CAAAH,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}